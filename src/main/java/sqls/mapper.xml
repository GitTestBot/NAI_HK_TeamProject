<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
  
<mapper namespace="com.hk.nai">

	 <resultMap id="MemberDto" type="com.hk.nai.dtos.MemberDto" >
	    <!-- property = CalDto의 field / column=db -->
	        <result property="seq" column="M_SEQ"/>
	        <result property="id" column="M_ID"/>
	        <result property="pw" column="M_PW"/>
	        <result property="nickname" column="M_NICK"/>
	        <result property="email" column="M_EMAIL"/>
	        <result property="grade" column ="M_GRADE"/>
	        <result property="point" column="M_POINT"/>
	        <result property="writeCheck" column="M_CHECK"/>
	    </resultMap>
	    
	    <resultMap id="AuthDto" type="com.hk.nai.dtos.AuthDto" >
	    <!-- property = AuthDto의 field / column=db -->
	        <result property="authId" column="M_ID"/>
	        <result property="academyName" column="AC_NAME"/>
	    </resultMap>
	
		<resultMap id="BasketDto" type="com.proto.project.dto.BasketDto" >
	        <result property="baskSeq" column="B_SEQ"/>
	        <result property="baskId" column="M_ID"/>
	        <result property="baskAcademyName" column="AC_NAME"/>
		</resultMap>
	    
		<resultMap id="RankingDto" type="com.proto.project.dto.RankingDto" >
	        <result property="rankAcademyName" column="AC_NAME"/>
	        <result property="rankScoreAverage" column="SCORE_AVG"/>
	    </resultMap>
	    
		<resultMap id="StartClassDto" type="com.proto.project.dto.StartClassDto" >
	        <result property="startAcademyName" column="AC_NAME"/>
	        <result property="startClassName" column="AC_CLASS"/>
	        <result property="startDDay" column="DDAY"/>
	    </resultMap>
	    
		<resultMap id="AcademyDto" type="com.proto.project.dto.AcademyDto" >
	        <result property="academyName" column="AC_NAME"/>
	    </resultMap>
<!-- 					수민 					-->

	<!-- 회원가입 -->    
	<select id="checkid" resultType="string" parameterType="String">
		SELECT M_ID FROM MEMBER WHERE M_ID = #{id}
	</select>
	
	<select id="checknickname" resultType="string" parameterType="String">
		SELECT M_NICK FROM MEMBER WHERE M_NICK = #{nickname}
	</select>
	
	<select id="checkemail" resultType="string" parameterType="String">
		SELECT M_EMAIL FROM MEMBER WHERE M_EMAIL = #{email}
	</select>
	
	<insert id="insertmember" parameterType="MemberDto">
		INSERT INTO MEMBER 
		(M_SEQ, M_ID, M_PW, M_NICK, M_EMAIL, M_GRADE, M_POINT, M_CHECK) 
		VALUES (
			MEMBER_SEQ.NEXTVAL
			, #{id}
			, #{pw}
			, #{nickname}
			, #{email}
			, #{grade}
			, 0
			, 'N'
		)
	</insert>
	
	<insert id="insertauth" parameterType="AuthDto">
		INSERT INTO AUTH 
		(M_ID, AC_NAME) 
		VALUES (
			#{authId}, 
			#{academyName}
		)
	</insert>
	
	<select id="signin" resultMap="MemberDto" parameterType="String">
		SELECT * FROM MEMBER WHERE M_ID = #{id}
	</select>
	
	<!-- 아이디 비번 찾기 -->
	<select id="findid" resultType="string" parameterType="string">
		SELECT M_ID FROM MEMBER WHERE M_EMAIL = #{email}
	</select>
	
	<select id="findpw" resultType="string" parameterType="MemberDto">
		SELECT M_EMAIL FROM MEMBER WHERE M_EMAIL = #{email} AND M_ID = #{id}
	</select>
	
	<update id="temppw" parameterType="MemberDto">
		UPDATE MEMBER SET M_PW = #{pw} WHERE M_ID = #{id}
	</update>
	
	<!-- 마이페이지 -->
	<select id="showmyinfo" resultMap="MemberDto" parameterType="string">
		SELECT * FROM MEMBER WHERE M_ID = #{id}
	</select>
	
	<select id="showauthinfo" resultMap="AuthDto" parameterType="string">
		SELECT * FROM AUTH WHERE M_ID = #{id}
	</select>
	
	<update id="updatepw" parameterType="MemberDto">
		UPDATE MEMBER SET M_PW = #{pw} WHERE M_ID = #{id}
	</update>
	
	<update id="updatenickname" parameterType="MemberDto">
		UPDATE MEMBER SET M_NICK = #{nickname} WHERE M_ID = #{id}
	</update>
	
	<update id="updateemail" parameterType="MemberDto">
		UPDATE MEMBER SET M_EMAIL = #{email} WHERE M_ID = #{id}
	</update>
	
	<update id="updateauth" parameterType="AuthDto">
		update auth set ac_name = #{academyName} where m_id = #{authId}
	</update>
	
	<delete id="deletemember" parameterType="MemberDto">
		DELETE FROM MEMBER WHERE M_ID = #{id} AND M_PW = #{pw}
	</delete>  	
	<delete id="deleteauth" parameterType="AuthDto">
		DELETE FROM AUTH WHERE M_ID = #{authId}
	</delete>

	<!-- 마이페이지 : 찜한 학원 -->
	<select id="showmyaclist" resultMap="BasketDto" parameterType="string">
		SELECT * FROM BASKET WHERE M_ID = #{baskId}
	</select>
	
	<delete id="delmyac" parameterType="integer">
		DELETE FROM BASKET WHERE B_SEQ IN
		<foreach collection="array" item="item" open="("  separator="," close=")">
			#{item}
		</foreach>
	</delete> 
	<!-- 랭킹 -->
	<select id="ranking" resultMap="RankingDto">
		SELECT AC_NAME, SCORE_AVG FROM VIEW_AC_RANKING 
		<![CDATA[
		WHERE ROWNUM<=10
		]]>
	</select>

	<!-- 개강마감임박 d-14 -->
	<select id="startclass" resultMap="StartClassDto">
	<!-- 20180630 = TEST용 나중에 sysdate로 변경 -->
		SELECT AC_NAME, AC_CLASS,
		<![CDATA[
		'20180630'- REPLACE(AC_CRE_DATE,'-','') AS DDAY
		FROM ACADEMY
		WHERE '20180630' - REPLACE(AC_CRE_DATE,'-','') BETWEEN 0 AND 14
		ORDER BY DDAY ASC
		]]>
	</select>
	
	<select id="searchacname" resultMap="AcademyDto" parameterType="string">
		<![CDATA[
		SELECT DISTINCT(AC_NAME) FROM ACADEMY WHERE AC_NAME LIKE '%' || #{academyName} || '%'
		]]>
	</select>

<!-- 					이한준					-->
	<select id="getScore" parameterType="String" resultType="Integer">
  		SELECT ac_score FROM ac_comment WHERE ac_name = #{subTitle}
  	</select>
  	
  	<select id="getComment" parameterType="String" resultType="CommentDto">
  		SELECT ac_name,ac_comment,ac_score,m_id FROM ac_comment WHERE ac_name = #{subTitle} order by cmt_num
  	</select>
  	
  	<insert id="addComment" parameterType="CommentDto">
  		insert into ac_comment values(#{ac_name},#{ac_comment},#{ac_score},#{m_id},cmtnum_seq.nextval)
  	</insert>
  	
  	<!-- websocket message -->
  	<insert id="sendMessage" parameterType="MessageDto">
  		insert into notice values(message_seq.nextval,#{n_receiver},#{n_sender},sysdate,#{n_content},#{ns_state_code})
  	</insert>
  	
  	<delete id="deleteMessage" parameterType="int">
  		delete notice where n_seq =#{n_seq}
  	</delete>
  	
  	<select id="getMessageList" parameterType="String" resultType="MessageDto">
  		select * from notice where n_receiver = #{n_receiver} order by n_time
  	</select>
  	
  	<select id="getMessage" parameterType="int" resultType="MessageDto">
  		select * from notice where n_seq = #{n_seq}
  	</select>
  	
  	<select id="getMsgNum" parameterType="String" resultType="MessageDto">
  		select n_seq from notice where n_receiver = #{n_receiver}
  	</select>
  	
  	<select id="getImg" parameterType="String" resultType="String">
  		select IMG from ac_img where ac_name = #{subtitle}
  	</select>
  	
  	<select id="getMemberList" resultMap="MemberDto">
  		select * from member
  	</select>

<!-- 					황인후					-->
	<!--   게시판쿼리 -->
  	<select id="getAllContent" resultType="BoardDto">
  		SELECT B_SEQ,M_NICK,B_TITLE,B_CONTENT,B_REGDATE,B_READCOUNT
  		FROM BOARD
  		ORDER BY B_SEQ DESC
  	</select>
  
  	<insert id="insertBoard" parameterType="BoardDto">
  		INSERT INTO BOARD VALUES
  		(BOARD_SEQ.NEXTVAL,#{m_nick},#{b_title},#{b_content},SYSDATE,0,0)
  	</insert>
  	
  	<select id="getBoard" resultType="BoardDto" parameterType="int">
  		SELECT B_SEQ,M_NICK,B_REGDATE,B_TITLE,B_CONTENT
  		FROM BOARD WHERE B_SEQ=#{b_seq}
  	</select>
  	
  	<update id="updateBoard" parameterType="BoardDto">
  		UPDATE BOARD
  		SET B_TITLE=#{b_title},B_CONTENT=#{b_content},B_REGDATE=sysdate,B_LIKE=#{b_like}
  		WHERE B_SEQ=#{b_seq}
  	</update>
  	
  	<update id="b_readCount" parameterType="int">
  		UPDATE BOARD SET B_READCOUNT=B_READCOUNT+1 WHERE B_SEQ=#{b_seq}
  	</update>
  	
  	<delete id="delBoard" parameterType="int">
  		DELETE FROM BOARD WHERE B_SEQ=#{b_seq}
  	</delete>
  	
  	<!-- 페이징 처리 -->
    
	<!--     최신순으로 10개씩 출력하는 쿼리 -->
    <select id="listCriteria" resultType="BoardDto" parameterType="String"> 
       <![CDATA[
			select * from
						(
							select ROW_NUMBER() OVER ( ORDER BY b_seq desc) rn,b_seq,m_nick,b_title,b_content,b_regdate,b_readcount,b_like from board
				 		)
 			 where ceil(rn/10)=#{page}
 			
		]]>
    </select>
	<!--     조회순으로 10개식 출력하는 쿼리 -->
    <select id="listCriteria1" resultType="BoardDto" parameterType="String"> 
       <![CDATA[
			select * from
						(
							select ROW_NUMBER() OVER ( ORDER BY b_readcount desc,b_seq desc) rn,b_seq,m_nick,b_title,b_content,b_regdate,b_readcount,b_like from board
				 		)
 			 where ceil(rn/10)=#{page}
 			
		]]>
    </select>  
    
    
    <!-- 전체 게시글 수를 구하는 쿼리 -->
    <select id="getTotalCount" resultType="java.lang.Integer">
        select count(*) from
        board
    </select>
    <!-- 댓글쿼리 -->
	<select id="commentList" resultType="CommentDto1">
  		SELECT R_SEQ,M_NICK,R_CONTENT,R_REGDATE
  		FROM REPLY
  		WHERE B_SEQ=#{b_seq}
  		ORDER BY R_SEQ DESC
  	</select>
  
  	<insert id="insertComment" parameterType="CommentDto1">
  		INSERT INTO REPLY VALUES
  		(REPLY_SEQ.NEXTVAL,#{b_seq},#{m_nick},#{r_content},sysdate)
  		
  	</insert>
  	
  	<update id="updateComment" parameterType="CommentDto1">
  		UPDATE REPLY
  		SET R_CONTENT=#{r_content},R_REGDATE=sysdate
  		WHERE R_SEQ=#{r_seq}
  	</update>
  	
  	<delete id="delComment" parameterType="int">
  		DELETE FROM REPLY WHERE R_SEQ=#{r_seq}
  	</delete>	
	<!-- 	특정댓글조회 -->
	<select id="readComment" resultType="CommentDto1">
		SELECT R_SEQ,B_SEQ,M_NICK,R_CONTENT,R_REGDATE
		FROM REPLY
		WHERE R_SEQ=#{r_seq}
	</select>
	
	<!-- 게시글 좋아요 체크 ..좋아요 버튼 클릭 이벤트시에 실행-->
	<update id="like_check" parameterType="HashMap">
		UPDATE LIKETO 
		SET LIKE_CHECK = LIKE_CHECK+1
		WEHRE M_NICK=#{m_nick} AND B_SEQ=#{b_seq}
	</update>
	
	<update id="like_check_cancle" parameterType="HashMap">
		UPDATE LIKETO
		SET LIKE_CHECK = 0
		WEHRE M_NICK=#{m_nick} AND B_SEQ=#{b_seq}
	</update>
	
<!-- 					찾기쉽게 본인 이름 					-->
</mapper>